<h1>About</h1>
<p><img alt="" height="397" src="/images/鴿子.jpg" width="700"/></p>
<p></p>
<p>倉儲: <a href="https://github.com/40823114/wcm2024/">https://github.com/40823114/wcm2024</a></p>
<p>網頁: <a class="Link--inTextBlock" href="https://40823114.github.io/wcm2024/">https://40823114.github.io/wcm2024</a></p>
<p>網誌: <a href="https://40823114.github.io/wcm2024/blog" title="https://40823114.github.io/wcm2024/blog">https://40823114.github.io/wcm2024/blog</a></p>
<p>簡報: <a href="https://40823114.github.io/wcm2024/reveal/index.html">https://40823114.github.io/wcm2024/reveal</a></p>
<p></p>
<p></p>
<p></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p>此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p>倉儲對應網站:<span> </span><a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>Week updated</h1>
<h2>w1</h2>
<h2>w2</h2>
<p>建立個人網站</p>
<h2>w3</h2>
<h3>常用 git 指令</h3>
<p><strong>git add xxxx </strong>                                                                                                                  </p>
<p>&gt; 新增xxxx</p>
<p><strong>git add .   </strong>                                                                                                                          </p>
<p><span>&gt; </span>新增全部</p>
<p><strong>git commit -m "說明字串" </strong>                                                                          </p>
<p><span>&gt; </span>提交, 改版說明, 綁定身分</p>
<p><strong>git push     </strong>                                                                                                                            </p>
<p><span>&gt; </span>推送</p>
<p><strong>git version </strong>               　 　　                                                                                                 </p>
<p><span>&gt; </span>查看版本</p>
<p><strong>git status</strong>　　　　　　　　      　                                                                                       </p>
<p><span>&gt; </span>查看當前版本</p>
<p><strong>git submodule add </strong>                                                                                              </p>
<p><span>&gt; </span>新增倉儲網址, 子目錄</p>
<p><strong>git clone </strong>                                                                                                                                  </p>
<p><span>&gt; </span>複製</p>
<p><strong>git clone --recurse-submodules</strong> 　                                                     </p>
<p><span>&gt; </span>複製倉儲網址_協定 .git 是否指定目錄</p>
<p><strong>git config --global user.name</strong> 　　                                                                                     </p>
<p><span>&gt; </span>設置用戶名稱</p>
<p><strong>git config --global user.email </strong>                                                                                          </p>
<p><span>&gt; </span>設置用戶信箱</p>
<p><strong>git pull = git fetch + git merge</strong>     </p>
<p><span>&gt; </span>抓取檔案更新並合併 = 抓取歷史提交和文件變化但不合併 + 將更新合併到本機 </p><h2>w4</h2>
<h2>w5</h2>
<h2>w6</h2>
<h3>git 的發展歷史</h3>
<p>ChatGPT的回覆:</p>
<p>Git 是一個分散式版本控制系統，由 Linus Torvalds 於2005年創建，以下是其主要發展歷史：</p>
<h4>1. 2005年：</h4>
<ul style="list-style-type: disc;">
<li>Git 專案由 Linux 核心社群發起，Linus Torvalds 開始編寫 Git。</li>
<li>第一個 Git 版本（0.99）發布，作為 Linux 核心開發的版本控制工具。</li>
</ul>
<h4>2. 2006年：</h4>
<ul>
<li>Git 的發展迅速，開始被其他開源專案採用。</li>
<li>Git 1.0 版本發布，穩定性提升。</li>
</ul>
<h4>3. 2007年：</h4>
<ul>
<li style="text-align: left;">GitHub 成立，為 Git 提供了強大的基於 Web 的託管服務。</li>
<li style="text-align: left;">Git 成為了許多開發人員的首選版本控制系統。</li>
</ul>
<h4>4. 2008年：</h4>
<ul>
<li>Git 社群不斷壯大，開發了許多有用的工具和外掛程式。</li>
<li>Git 1.5 版本發布，引入了許多新功能和改進。</li>
</ul>
<h4>5. 2009年：<br/><span></span></h4>
<ul>
<li>Git 在企業中的應用逐漸增多，被認為是一種高效率的版本控制解決方案。</li>
<li>Git 1.6 版本發布，繼續改進和優化。</li>
</ul>
<h4>6. 2010年至2015年：</h4>
<ul>
<li>Git 的使用持續成長，成為許多大型專案和公司的標準版本控制系統。</li>
<li>社群不斷改進 Git 的性能和易用性。</li>
</ul>
<h4>7. 2016年至今：</h4>
<ul>
<li>Git 的發展重點逐漸轉向解決大規模專案的管理和效能問題。</li>
<li>出現了許多 Git 的衍生版本和工具，以滿足不同的需求和場景。</li>
<li>持續有新版本發布，不斷改進功能和效能。</li>
</ul>
<h3>git 創作人的相關履歷</h3>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">ChatGPT的回覆:</span></span></p>
<p>Git 的創作者是 Linus Torvalds，他是一位著名的電腦程式設計師，主要以創建 Linux 核心而聞名。以下是他的相關履歷：</p>
<h4>1. Linux 核心的創建：</h4>
<ul>
<li>1991年，當時還是芬蘭赫爾辛基大學電腦科學學生的 Linus Torvalds 開始了 Linux 核心的開發。</li>
<li>他最初只是為了個人興趣而創建 Linux，但很快就吸引了全球志同道合的開發者們的注意和參與。</li>
</ul>
<h4>2. 開源精神的實踐者：</h4>
<ul>
<li>Linus Torvalds 在創建 Linux 時，選擇了開源的方式，這意味著他的程式碼是公開可見的，任何人都可以查看、修改和使用。</li>
<li>這種開放的開發模式吸引了許多開發者的加入，使得 Linux 核心在短時間內得到了快速的發展。</li>
</ul>
<h4>3.Linux 的發展：</h4>
<ul>
<li>隨著越來越多的開發者的加入，Linux 核心逐漸成長為一個功能強大、穩定可靠的作業系統核心。</li>
<li>Linux 現在被廣泛用於伺服器、嵌入式系統、行動裝置等領域，成為了主流作業系統之一。</li>
</ul>
<h4>4.Git 版本控制系統的建立：</h4>
<ul>
<li>2005年，Linus Torvalds 創建了 Git 分散式版本控制系統，作為 Linux 核心開發的工具。</li>
<li>Git 的出現解決了許多 Linux 核心開發過程中的問題，並迅速成為了全球開發者的首選版本控制系統。</li>
</ul>
<h4>5.社區領袖：</h4>
<ul>
<li>Linus Torvalds 作為 Linux 核心專案的領導人，對整個開源社群的發展產生了重大影響。</li>
<li>他的領導風格以及對開放、透明和合作的倡導，使得 Linux 社群成為了一個活躍、多元、充滿活力的開源社群。</li>
</ul>
<h4>6.榮譽與獎項：</h4>
<ul>
<li>Linus Torvalds 因其對電腦科學和開源軟體的貢獻而獲得了許多榮譽和獎項，包括 Millennium Technology Prize、IEEE電腦先驅獎等。</li>
</ul>
<h3>一般相同專業人士如何利用 git 解決內容管理問題</h3>
<p><span><span class="ui-provider a b c d e f g h i j k l m n o p q r s t u v w x y z ab ac ae af ag ah ai aj ak" dir="ltr">ChatGPT的回覆:</span></span></p>
<p>以下是一般相同專業人士如何利用 Git 解決內容管理問題的方式：</p>
<h4>1.版本控制：</h4>
<ul>
<li>Git 提供了版本控制功能，使團隊能夠追蹤文件的修改歷史，並能夠輕鬆地回滾到先前的版本。</li>
<li>專業人士可以利用 Git 來管理文件、程式碼、設定檔等各種類型的文件，確保團隊的工作始終處於可追溯、可控制的狀態。</li>
</ul>
<h4>2.協作與合作：</h4>
<ul>
<li>Git 允許多個人同時對同一份文件進行編輯，並能夠有效地合併他們的更改。</li>
<li>專業人士可以利用 Git 來協作開發專案、分享文件、進行程式碼評審等，提高團隊的工作效率和合作效果。</li>
</ul>
<h4>3.分支管理：</h4>
<ul>
<li>Git 的分支功能使得團隊能夠並行開發不同的功能、修復 bug、實驗新功能等，而不會影響主線開發。</li>
<li>專業人士可以利用 Git 的分支來進行功能開發、版本發布、實驗性工作等，以保持主線程式碼的穩定性。</li>
</ul>
<h4>4.追蹤變更：</h4>
<ul>
<li>Git 提供了詳細的變更記錄和提交歷史，使團隊能夠清楚地了解每一次修改的內容、作者和時間。</li>
<li>專業人士可以利用 Git 來追蹤工作進度、分析問題、審查程式碼品質等，提高工作的透明度和品質。</li>
</ul>
<h4>5.備份與復原：</h4>
<ul>
<li>Git 的分散特性使得團隊的程式碼倉庫可以輕鬆備份到多個地點，確保資料的安全性和可靠性。</li>
<li>專業人士可以利用 Git 來進行定期備份、緊急復原等操作，保護團隊的重要資料不受損失。<br/><br/></li>
</ul>
<h3>在 Windows 實際 demo git client 與 git server</h3>
<p><span>在目錄 y:\tmp 建立 gitproject\repository 與 gitserver\repository </span></p>
<p><span>在 Y:\tmp\gitproject&gt; git config --global init.defaultBranch main</span></p>
<p><span>進入 gitproject\repository 目錄, 新增一個目錄名稱為 repo1, 進入 repo1 後執行 git init</span></p>
<p><span>進入 gitserver\repository 目錄, 新增一個目錄名稱為 repo1, 進入 repo1 後執行 git init --bare</span></p>
<p><span>在 Y:\tmp\gitproject\repo1 目錄, 建立新檔案 README.md:</span></p>
<p>: echo "Hello, World!" &gt; README.md</p>
<p>: git add README.md</p>
<p>: git commit -m "Initial commit"</p>
<p>: git remote add origin y:\tmp\gitserver\repository\repo1</p>
<p>: git push -u origin main</p>
<p>將 <span>Y:\tmp\gitserver\repository\repo1 複製到 C:\tmp\repository</span></p>
<p><span>在 C:\tmp\repository&gt; 執行 git clone Y:\tmp\gitserver\repository\repo1</span></p>
<p></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Codespaces</h1>
<p><a class="Link--inTextBlock" href="https://40823114.github.io/wcm2024/">https://40823114.github.io/wcm2024/</a></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>