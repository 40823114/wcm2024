var tipuesearch = {"pages": [{'title': 'Week updated', 'text': '', 'tags': '', 'url': 'Week updated.html'}, {'title': 'w1', 'text': '', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '', 'tags': '', 'url': 'w6.html'}, {'title': 'git 的發展歷史', 'text': 'ChatGPT的回覆: \n Git 是一個分散式版本控制系統，由 Linus Torvalds 於2005年創建，以下是其主要發展歷史： \n 1. 2005年： \n \n Git 專案由 Linux 核心社群發起，Linus Torvalds 開始編寫 Git。 \n 第一個 Git 版本（0.99）發布，作為 Linux 核心開發的版本控制工具。 \n \n 2. 2006年： \n \n Git 的發展迅速，開始被其他開源專案採用。 \n Git 1.0 版本發布，穩定性提升。 \n \n 3. 2007年： \n \n GitHub 成立，為 Git 提供了強大的基於 Web 的託管服務。 \n Git 成為了許多開發人員的首選版本控制系統。 \n \n 4. 2008年： \n \n Git 社群不斷壯大，開發了許多有用的工具和外掛程式。 \n Git 1.5 版本發布，引入了許多新功能和改進。 \n \n 5. 2009年： \n \n Git 在企業中的應用逐漸增多，被認為是一種高效率的版本控制解決方案。 \n Git 1.6 版本發布，繼續改進和優化。 \n \n 6. 2010年至2015年： \n \n Git 的使用持續成長，成為許多大型專案和公司的標準版本控制系統。 \n 社群不斷改進 Git 的性能和易用性。 \n \n 7. 2016年至今： \n \n Git 的發展重點逐漸轉向解決大規模專案的管理和效能問題。 \n 出現了許多 Git 的衍生版本和工具，以滿足不同的需求和場景。 \n 持續有新版本發布，不斷改進功能和效能。 \n \n', 'tags': '', 'url': 'git 的發展歷史.html'}, {'title': 'git 創作人的相關履歷', 'text': 'ChatGPT的回覆: \n Git 的創作者是 Linus Torvalds，他是一位著名的電腦程式設計師，主要以創建 Linux 核心而聞名。以下是他的相關履歷： \n 1. Linux 核心的創建： \n \n 1991年，當時還是芬蘭赫爾辛基大學電腦科學學生的 Linus Torvalds 開始了 Linux 核心的開發。 \n 他最初只是為了個人興趣而創建 Linux，但很快就吸引了全球志同道合的開發者們的注意和參與。 \n \n 2. 開源精神的實踐者： \n \n Linus Torvalds 在創建 Linux 時，選擇了開源的方式，這意味著他的程式碼是公開可見的，任何人都可以查看、修改和使用。 \n 這種開放的開發模式吸引了許多開發者的加入，使得 Linux 核心在短時間內得到了快速的發展。 \n \n 3.Linux 的發展： \n \n 隨著越來越多的開發者的加入，Linux 核心逐漸成長為一個功能強大、穩定可靠的作業系統核心。 \n Linux 現在被廣泛用於伺服器、嵌入式系統、行動裝置等領域，成為了主流作業系統之一。 \n \n 4.Git 版本控制系統的建立： \n \n 2005年，Linus Torvalds 創建了 Git 分散式版本控制系統，作為 Linux 核心開發的工具。 \n Git 的出現解決了許多 Linux 核心開發過程中的問題，並迅速成為了全球開發者的首選版本控制系統。 \n \n 5.社區領袖： \n \n Linus Torvalds 作為 Linux 核心專案的領導人，對整個開源社群的發展產生了重大影響。 \n 他的領導風格以及對開放、透明和合作的倡導，使得 Linux 社群成為了一個活躍、多元、充滿活力的開源社群。 \n \n 6.榮譽與獎項： \n \n Linus Torvalds 因其對電腦科學和開源軟體的貢獻而獲得了許多榮譽和獎項，包括 Millennium Technology Prize、IEEE電腦先驅獎等。 \n \n', 'tags': '', 'url': 'git 創作人的相關履歷.html'}, {'title': '一般相同專業人士如何利用 git 解決內容管理問題', 'text': 'ChatGPT的回覆: \n 以下是一般相同專業人士如何利用 Git 解決內容管理問題的方式： \n 1.版本控制： \n \n Git 提供了版本控制功能，使團隊能夠追蹤文件的修改歷史，並能夠輕鬆地回滾到先前的版本。 \n 專業人士可以利用 Git 來管理文件、程式碼、設定檔等各種類型的文件，確保團隊的工作始終處於可追溯、可控制的狀態。 \n \n 2.協作與合作： \n \n Git 允許多個人同時對同一份文件進行編輯，並能夠有效地合併他們的更改。 \n 專業人士可以利用 Git 來協作開發專案、分享文件、進行程式碼評審等，提高團隊的工作效率和合作效果。 \n \n 3.分支管理： \n \n Git 的分支功能使得團隊能夠並行開發不同的功能、修復 bug、實驗新功能等，而不會影響主線開發。 \n 專業人士可以利用 Git 的分支來進行功能開發、版本發布、實驗性工作等，以保持主線程式碼的穩定性。 \n \n 4.追蹤變更： \n \n Git 提供了詳細的變更記錄和提交歷史，使團隊能夠清楚地了解每一次修改的內容、作者和時間。 \n 專業人士可以利用 Git 來追蹤工作進度、分析問題、審查程式碼品質等，提高工作的透明度和品質。 \n \n 5.備份與復原： \n \n Git 的分散特性使得團隊的程式碼倉庫可以輕鬆備份到多個地點，確保資料的安全性和可靠性。 \n 專業人士可以利用 Git 來進行定期備份、緊急復原等操作，保護團隊的重要資料不受損失。 \n \n', 'tags': '', 'url': '一般相同專業人士如何利用 git 解決內容管理問題.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'https://40823114.github.io/wcm2024/ \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};